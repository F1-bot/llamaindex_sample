import asyncio
import requests
from bs4 import BeautifulSoup
import urllib.parse

from llama_index.core.tools import FunctionTool
from llama_index.llms.ollama import Ollama
from llama_index.core.agent.workflow import FunctionAgent


def search_foxtrot(query: str) -> str:
    """
    –®—É–∫–∞—î —Ç–æ–≤–∞—Ä–∏ –Ω–∞ —Å–∞–π—Ç—ñ foxtrot.com.ua. –í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤–∏, —Ü—ñ–Ω–∏, —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä–∏.
    """
    print(f"--- –ü–æ—à—É–∫ –Ω–∞ Foxtrot: '{query}' ---")
    try:
        base_url = "https://www.foxtrot.com.ua"
        encoded_query = urllib.parse.quote_plus(query)
        search_url = f"{base_url}/uk/search?query={encoded_query}"

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        }
        response = requests.get(search_url, headers=headers, timeout=20)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        product_cards = soup.find_all('div', class_='card', limit=5)

        if not product_cards:
            return f"–¢–æ–≤–∞—Ä—ñ–≤ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{query}' –Ω–∞ Foxtrot –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        results = []
        for card in product_cards:
            card_head = card.find('div', class_='card__head')
            title_tag = card.find('a', class_='card__title')

            title = title_tag.get_text(strip=True) if title_tag else "–ù–∞–∑–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

            price_text = "–¶—ñ–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞"
            if card_head and 'data-price' in card_head.attrs:
                price_value = card_head['data-price']
                if price_value and price_value.isdigit():
                    price_text = f"{price_value} –≥—Ä–Ω"

            rating_tag = card.find('div', class_='star-gradient-number')
            rating_text = "–†–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"
            if rating_tag:
                rating_text = rating_tag.get_text(strip=True)

            link_text = "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            if title_tag and 'href' in title_tag.attrs:
                link_text = base_url + title_tag['href']

            results.append(f"- –ù–∞–∑–≤–∞: {title}, –¶—ñ–Ω–∞: {price_text}, –†–µ–π—Ç–∏–Ω–≥: {rating_text}, –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {link_text}")

        return "\n".join(results)

    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –Ω–∞ Foxtrot: {e}"


def save_report_to_file(filename: str, report_content: str) -> str:
    """–ó–±–µ—Ä—ñ–≥–∞—î –∑–≤—ñ—Ç (—Ç–µ–∫—Å—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown) —É —Ñ–∞–π–ª."""
    print(f"--- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–≤—ñ—Ç—É —É —Ñ–∞–π–ª: {filename} ---")
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        return f"–ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª '{filename}'."
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}"


print("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è LLM (qwen3:8b)...")
llm = Ollama(model="qwen3:8b", request_timeout=300.0)

print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤...")
foxtrot_tool = FunctionTool.from_defaults(fn=search_foxtrot)
file_write_tool = FunctionTool.from_defaults(fn=save_report_to_file)

all_tools = [foxtrot_tool, file_write_tool]

print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞ 'Foxtrot Scraper'...")
system_prompt = """
–¢–∏ ‚Äî AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç, —â–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –Ω–∞ –ø–æ—à—É–∫—É —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∞–π—Ç—ñ Foxtrot.com.ua.
–¢–≤–æ—è –º–µ—Ç–∞ ‚Äî –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –≤–∏—Ç—è–≥—É–≤–∞—Ç–∏ –∫–ª—é—á–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–Ω–∞–∑–≤—É, —Ü—ñ–Ω—É, —Ä–µ–π—Ç–∏–Ω–≥, –ø–æ—Å–∏–ª–∞–Ω–Ω—è) —Ç–∞ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–≤—ñ—Ç.

–¢–≤—ñ–π –ø–ª–∞–Ω –¥—ñ–π:
1.  **–ü–æ—à—É–∫:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç `search_foxtrot` –∑ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
2.  **–ê–Ω–∞–ª—ñ–∑:** –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –æ—Ç—Ä–∏–º–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
3.  **–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É:** –°—Ç–≤–æ—Ä–∏ –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown –∑ —Ç–∞–±–ª–∏—Ü–µ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤. –í–∫–ª—é—á–∏ –∫–æ–ª–æ–Ω–∫–∏: –ù–∞–∑–≤–∞, –¶—ñ–Ω–∞, –†–µ–π—Ç–∏–Ω–≥, –ü–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º —É Markdown —Ñ–æ—Ä–º–∞—Ç—ñ.
4.  **–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è:** –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π `save_report_to_file`, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç —É —Ñ–∞–π–ª –∑ –Ω–∞–∑–≤–æ—é, —è–∫—É –≤–∫–∞–∑–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.

–ü—Ä–∞—Ü—é–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –¥–æ –ø–æ–≤–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è. –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
"""

agent = FunctionAgent(
    tools=all_tools,
    llm=llm,
    system_prompt=system_prompt,
    verbose=True
)


async def main():
    task = (
        "–ó–Ω–∞–π–¥–∏ –Ω–∞ Foxtrot —Ç–æ–≤–∞—Ä–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ '–∫–∞–ø—ñ–±–∞—Ä–∞', "
        "—ñ –∑–±–µ—Ä–µ–∂–∏ –∑–≤—ñ—Ç –∑ —ó—Ö —Ü—ñ–Ω–∞–º–∏, —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ —É —Ñ–∞–π–ª 'foxtrot_capybara_full_report.md'."
    )
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–≥–µ–Ω—Ç–∞ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è–º: '{task}'\n")

    response = await agent.run(user_msg=task)

    print("\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ!")
    print(f"–§—ñ–Ω–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–≥–µ–Ω—Ç–∞: {response}")
    print("\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª 'foxtrot_capybara_full_report.md' —É –≤–∞—à—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.")


if __name__ == "__main__":
    asyncio.run(main())